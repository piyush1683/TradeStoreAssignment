@startuml
!theme plain
title Trade Store - Component Architecture

' External Systems 
component "Trade Store External Clients" as clients
cloud "Kafka Streaming Cluster" as kafka
cloud "AWS DynamoDB" as dynamodb
cloud "PostgreSQL" as postgres

package "Trade Ingestion Service" {
    [REST Controller] as restController
    [File Upload Handler] as fileHandler
    [Kafka Producer] as kafkaProducer
    [Trade Initial Validation Service] as initialValidation
    [Query and Notification Service] as queryService
}

package "Trade Capture Service" {
    [Kafka Consumer] as kafkaConsumer
    [Trade Aggregate Processor] as tradeProcessor
    [DynamoDB Client] as dynamoClient
}

package "Trade Validation And Storage Service" {
    [Validation Engine] as validationEngine
    [Projection and Snapshot Service] as projectionService
    [Expiry Scheduler] as expiryScheduler
}

package "Trade Common Module" {
    [Trade Model] as tradeModel
    [Validation Annotations] as validationAnnotations
    [Business Rules Validation] as commonValidation
}

clients --> restController
clients --> fileHandler
clients --> queryService

fileHandler --> initialValidation
restController --> initialValidation
initialValidation --> kafkaProducer
kafkaProducer --> kafka

kafka --> kafkaConsumer
kafkaConsumer --> tradeProcessor
tradeProcessor --> dynamoClient
dynamoClient --> dynamodb

dynamodb --> validationEngine
validationEngine --> projectionService
projectionService --> postgres

queryService --> postgres
expiryScheduler --> postgres

validationEngine --> commonValidation
commonValidation --> validationAnnotations : uses
tradeProcessor --> tradeModel
restController --> tradeModel

@enduml
