@startuml
' Force component-diagram context
!pragma layout smetana

title Trade Store â€“ Data Flow Diagram

'--- Define colors ---
!define DATABASE_COLOR #8B4513

'--- Data Sources ---
package "Data Sources" as sources {
  component "REST API Input" as restInput
  component "File Upload" as fileInput
  component "Batch Processing" as batchInput
}

'--- Trade Ingestion Service ---
package "Trade Ingestion Service" as ingestion {
  component "Trade Controller" as controller
  component "Kafka Producer" as producer
  component "Query Service" as queryService
}

'--- Message Queue ---
package "Message Queue" as messaging {
  component "Kafka Topic: trade_ingestion" as kafkaTopic
}

'--- Trade Capture Service ---
package "Trade Capture Service" as capture {
  component "Kafka Consumer" as consumer
  component "Trade Processor" as processor
  component "DynamoDB Client" as dynamoClient
}

'--- Trade Validation Service ---
package "Trade Validation Service" as validation {
  component "Validation Engine" as validationEngine
  component "Projection Service" as projectionService
  component "Expiry Scheduler" as expiryScheduler
}

'--- Data Stores ---
package "Data Stores" as stores #DATABASE_COLOR {
  database "DynamoDB Event Store" as eventStore
  database "PostgreSQL Projection Store" as projectionStore
  database "PostgreSQL Exception Store" as exceptionStore
}

'--- Data Flow connections ---
restInput --> controller : Trade Data
fileInput --> controller : Trade Data
batchInput --> controller : Trade Data
controller --> producer : Trade Object
producer --> kafkaTopic : Publish Event
kafkaTopic --> consumer : Consume Event
consumer --> processor : Process Trade
processor --> dynamoClient : Store Event
dynamoClient --> eventStore : Persist Event
processor --> validationEngine : Validate Trade
validationEngine --> projectionService : Update Projection
projectionService --> projectionStore : Store Valid Trade (if valid)
projectionService --> exceptionStore : Store Exception (if invalid)
queryService --> projectionStore : Query Trades
queryService --> exceptionStore : Query Exceptions
expiryScheduler --> projectionStore : Check & Update Expired Trades

@enduml
