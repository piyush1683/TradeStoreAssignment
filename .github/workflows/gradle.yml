# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Replace secrets in application.properties
      run: |
        # Replace database password in trade-validation-storage
        sed -i "s|{password}|${{ secrets.DB_PASSWORD }}|g" trade-validation-storage/src/main/resources/application.properties
        
        # Replace database password in trade-common
        sed -i "s|{password}|${{ secrets.DB_PASSWORD }}|g" trade-common/src/main/resources/application.properties
        
        # Replace database password in trade-ingestion
        sed -i "s|{password}|${{ secrets.DB_PASSWORD }}|g" trade-ingestion/src/main/resources/application.properties
        
        # Replace Kafka password in trade-capture
        sed -i "s|{kafka-password}|${{ secrets.KAFKA_PASSWORD }}|g" trade-capture/src/main/resources/application.properties
        
        # Replace AWS secret key in trade-capture
        sed -i "s|{aws-secret-key}|${{ secrets.AWS_SECRET_KEY }}|g" trade-capture/src/main/resources/application.properties
        
        # Replace Kafka password in trade-ingestion
        sed -i "s|{kafka-password}|${{ secrets.KAFKA_PASSWORD }}|g" trade-ingestion/src/main/resources/application.properties

    - name: Build with Gradle Wrapper
      run: bash ./gradlew build

    - name: Install OSV-Scanner
      run: |
        echo "Installing OSV-Scanner using Docker method..."
        
        # Create a simple wrapper script for osv-scanner
        cat > osv-scanner << 'EOF'
        #!/bin/bash
        docker run --rm -v "$(pwd):/src" -w /src gcr.io/osv-scanner/osv-scanner:latest "$@"
        EOF
        
        chmod +x osv-scanner
        sudo mv osv-scanner /usr/local/bin/
        
        # Test the installation
        echo "Testing OSV-Scanner installation..."
        osv-scanner --version

    - name: Run OSV-Scanner
      run: |
        echo "Running OSV-Scanner for vulnerability detection..."
        osv-scanner -r . --format=json --output=osv-scan-results.json || true
        
        # Check for critical vulnerabilities
        if [ -f "osv-scan-results.json" ]; then
          echo "OSV-Scanner results:"
          cat osv-scan-results.json
          
          # Count critical vulnerabilities (severity: CRITICAL)
          critical_count=$(jq '[.results[]?.packages[]?.vulnerabilities[]? | select(.severity[]?.score == "CRITICAL")] | length' osv-scan-results.json 2>/dev/null || echo "0")
          
          echo "Critical vulnerabilities found: $critical_count"
          
          if [ "$critical_count" -gt 0 ]; then
            echo "❌ CRITICAL VULNERABILITIES DETECTED! Build will fail."
            echo "Please review and fix the following critical vulnerabilities:"
            jq -r '.results[]?.packages[]?.vulnerabilities[]? | select(.severity[]?.score == "CRITICAL") | "- \(.id): \(.summary // .details // "No description")"' osv-scan-results.json 2>/dev/null || true
            exit 1
          else
            echo "✅ No critical vulnerabilities found."
          fi
        else
          echo "⚠️ No OSV-Scanner results file generated."
        fi

    - name: Create target directory
      run: mkdir -p target

    - name: Copy JAR files to target directory
      run: |
        # Copy JAR files from all modules
        find . -name "*.jar" -path "*/build/libs/*" -not -path "*/build/libs/*-plain.jar" -exec cp {} target/ \;
        
        # List copied files for verification
        echo "Copied JAR files:"
        ls -la target/

    - name: Create build info file
      run: |
        echo "Build Information" > target/build-info.txt
        echo "=================" >> target/build-info.txt
        echo "Build Date: $(date)" >> target/build-info.txt
        echo "Build Number: ${{ github.run_number }}" >> target/build-info.txt
        echo "Commit SHA: ${{ github.sha }}" >> target/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> target/build-info.txt
        echo "Workflow: ${{ github.workflow }}" >> target/build-info.txt
        echo "" >> target/build-info.txt
        echo "JAR Files:" >> target/build-info.txt
        ls -la target/*.jar >> target/build-info.txt 2>/dev/null || echo "No JAR files found" >> target/build-info.txt

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit and push build artifacts
      run: |
        git add target/
        git commit -m "Build artifacts from workflow run ${{ github.run_number }} [skip ci]" || exit 0
        git push

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

