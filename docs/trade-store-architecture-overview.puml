@startuml
title Trade Store System - Architecture Overview

actor "Web Clients" as WC
actor "Mobile Apps" as MA
actor "External Systems" as ES

rectangle "API Gateway Layer" {
    component "Load Balancer" as LB
    component "API Gateway" as AG
}

rectangle "Trade Ingestion Service" {
    component "REST Controllers" as RC
    component "Kafka Producers" as KP
    component "File Processors" as FP
    component "Query Services" as QS
}

rectangle "Trade Capture Service" {
    component "Kafka Consumers" as KC
    component "DynamoDB Clients" as DC
    component "Trade Processors" as TP
}

rectangle "Trade Validation & Storage" {
    component "Validation Services" as VS
    component "Projection Services" as PS
    component "Scheduled Tasks" as ST
    component "PostgreSQL Clients" as PC
}

rectangle "Common Services Layer" {
    component "Trade Models" as TM
    component "Validation Annotations" as VA
    component "AOP Aspects" as AA
    component "Exception Handlers" as EH
    component "Utility Services" as US
}

rectangle "Message Layer" {
    component "Kafka Cluster" as KCL
    component "Message Topics" as MT
    component "Event Streaming" as ES2
}

rectangle "Event Store" {
    component "DynamoDB Tables" as DT
    component "Trade Events" as TE
    component "Audit Logs" as AL
}

rectangle "Projection Store" {
    component "PostgreSQL Database" as PD
    component "Trade Projections" as TP2
    component "Exception Records" as ER
}

rectangle "Infrastructure Layer" {
    component "AWS Services" as AWS
    component "Monitoring" as MON
    component "Logging" as LOG
    component "Security" as SEC
}

' Connections
WC --> LB
MA --> LB
ES --> LB

LB --> AG
AG --> RC
AG --> QS

RC --> KP
KP --> KCL
KCL --> KC
KC --> TP
TP --> DC
TP --> VS
VS --> PS
PS --> PC

RC --> TM
KP --> TM
TP --> TM
VS --> TM
VS --> VA
VS --> AA

DC --> DT
PC --> PD
ST --> PD

DT --> AWS
PD --> AWS
KCL --> AWS

RC --> MON
TP --> MON
VS --> MON
VS --> LOG

note top of WC
External Interfaces:
- REST APIs for trade ingestion
- Query APIs for trade data
- File upload capabilities
- Real-time notifications
end note

note right of VS
Microservices Features:
- Independent deployment
- Scalable architecture
- Fault isolation
- Technology diversity
end note

note right of TM
Shared Components:
- Domain models
- Validation logic
- Cross-cutting concerns
- Common utilities
end note

note bottom of DT
Data Architecture:
- Event Sourcing (DynamoDB)
- CQRS (PostgreSQL)
- Eventual consistency
- Audit trail
end note

note left of KCL
Message Patterns:
- Asynchronous processing
- Event-driven architecture
- Guaranteed delivery
- Scalable messaging
end note

note bottom of AWS
Technology Stack:
- Backend: Spring Boot 3.3.4, Java 21
- Messaging: Apache Kafka (Confluent Cloud)
- Databases: DynamoDB, PostgreSQL
- Cloud: AWS Services
- Monitoring: Spring Actuator, Logback
- Build: Gradle Multi-module
- Testing: JUnit 5, Mockito
end note

@enduml