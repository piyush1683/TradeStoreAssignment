@startuml
!theme plain
title Trade Store - Processing Sequence using REST Handler

participant "Client" as client
participant "Trade Ingestion Service" as ingestion
participant "Kafka Cluster" as kafka
participant "Trade Capture Service" as capture
participant "DynamoDB" as dynamodb
participant "Trade Validation Service" as validation
participant "PostgreSQL" as postgres
participant "Trade Common" as common

== Trade Processing Flow ==

client -> ingestion : POST /api/trades
note right : Trade data with validation rules

ingestion -> ingestion : Validate Trade Data
ingestion -> ingestion : Generate Request ID
ingestion -> kafka : Publish Trade Event
note right : topic: trade_ingestion

kafka -> capture : Consume Trade Event
note right : @KafkaListener

capture -> capture : Trade Aggregation
capture -> dynamodb : Store Trade Event
note right : PutItemRequest

dynamodb --> capture : Event Stored

dynamodb -> validation : updateTradeProjectStore
note right : DynamoDB Streams 

validation -> common : validateTrade
note right : Business Rules Validation

common -> common : Check Version
common -> common : Check Maturity Date
common -> common : Check Expiry Status

common --> validation : Validation Result

alt Trade is Valid
    validation -> postgres : Insert Trade Projections
    postgres --> validation : Projection Updated
    validation --> capture : Success Response
else Trade is Invalid
    validation -> postgres : Insert Trade Exception
    postgres --> validation : Exception Stored
    validation --> capture : Validation Failed
end

capture --> client : Trade Status Notification

== Notifications Flow ==

client -> ingestion : GET /api/notifications
ingestion -> validation : Get Notifications
validation -> postgres : SELECT from trade_exception
postgres --> validation : Notifications Records
validation --> ingestion : Notifications Data
ingestion --> client : HTTP Response

== Query Flow ==

client -> ingestion : GET /api/trade/{tradeId}
ingestion -> validation : Get Trade Status and data
validation -> postgres : SELECT from trade_projection
postgres --> validation : Trade status and data
validation --> ingestion : Trade Data
ingestion --> client : HTTP Response

== Trade Expiry  ==

loop Every 5 minutes
    validation -> validation : @Scheduled Expiry Check
    validation -> postgres : Query Expired Trades
    postgres --> validation : Expired Trade List
    
    loop For each expired trade
        validation -> common : checkAndMarkTradeAsExpired
        common -> common : Validate Expiry Date
        common --> validation : Expiry Confirmed
        validation -> postgres : UPDATE expired = Y
        postgres --> validation : Trade Marked as Expired
    end
end

@enduml
